Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

C++:
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *sortedArrayToBST(vector<int> &num) {
        if(num.size()==0) return NULL;
        int s = 0;
        int e = num.size()-1;
        TreeNode *root=build(num,s,e);
        return root;
    }
    TreeNode *build(vector<int> &num,int s,int e){
        if(s>e) return NULL;
        int m = s+(e-s)/2;
        TreeNode *root = new TreeNode(num[m]);
        root->left=build(num,s,m-1);
        root->right=build(num,m+1,e);
        return root;
    }
};

Java:
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode sortedArrayToBST(int[] num) {
        if(num.length==0) return null;
        return tree(num,0,num.length-1);
    }
    public static TreeNode tree(int[] num,int start,int end){
        if(start>end) return null;
      //  if(start==end) return new TreeNode(num[start]);
        int mid = start+(end-start)/2;
        TreeNode t = new TreeNode(num[mid]);
        t.left = tree(num,start,mid-1);
        t.right = tree(num,mid+1,end);
        return t;
    }
}
