Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
Elements in a combination (a1, a2, … , ak) must be in non-descending order. (ie, a1 ≤ a2 ≤ … ≤ ak).
The solution set must not contain duplicate combinations.
For example, given candidate set 2,3,6,7 and target 7, 
A solution set is: 
[7] 
[2, 2, 3] 

public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        int len = candidates.length;
        if(len==0) return ans;
        List<Integer> tmp = new ArrayList<Integer>();
        Arrays.sort(candidates);
        dfs(ans,tmp,candidates,target,0);
        return ans;
    }
    public static void dfs(List<List<Integer>> ans,List<Integer> tmp,int[] can,int t,int s){
        if(t<0) return;
        if(t==0){
            ans.add(new ArrayList<Integer>(tmp));
            return;
        }
        for(int i=s;i<can.length;i++){
            tmp.add(can[i]);
            dfs(ans,tmp,can,t-can[i],i);
            tmp.remove(tmp.size()-1);
        }
    }
}
