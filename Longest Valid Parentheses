Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

For "(()", the longest valid parentheses substring is "()", which has length = 2.

Another example is ")()())", where the longest valid parentheses substring is "()()", which has length = 4.

public class Solution {
    public int longestValidParentheses(String s) {
        if(s.length()<=1) return 0;
        Stack<Integer> st = new Stack<Integer>();
        int max = 0;
        int f = 0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='('){
               st.push(i);
            } 
            else{
                if(st.isEmpty()){
                    f=0;
                }
                else {
                    int pos = st.pop();
                    int maxt = i-pos+1;
                    if(st.isEmpty()){
                        f +=maxt;
                        maxt = f;
                    }
                    else{
                        maxt = i-st.peek();
                    }
                    max = Math.max(max,maxt);
                }
            }
        }
        return max;
    }
}
