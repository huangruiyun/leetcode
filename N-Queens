The n-queens puzzle is the problem of placing n queens on an n√ón chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space respectively.

For example,
There exist two distinct solutions to the 4-queens puzzle:

[
 [".Q..",  // Solution 1
  "...Q",
  "Q...",
  "..Q."],

 ["..Q.",  // Solution 2
  "Q...",
  "...Q",
  ".Q.."]
]

public class Solution {
    public List<String[]> solveNQueens(int n) {
        List<String[]> ans = new ArrayList<String[]>();
        if(n==0) return ans;
        StringBuilder[] tmp = new StringBuilder[n];
        String s="";
        for(int i=0;i<n;i++){
            s += '.';
        }
        for(int j=0;j<n;j++){
            tmp[j] = new StringBuilder(s);
        }
        place(ans,tmp,n,0);
        return ans;
    }
    public static void place(List<String[]> ans,StringBuilder[] tmp,int n,int row){
        if(row==n){
            String[] s = new String[n];
            for(int i=0;i<n;i++){
                s[i] = tmp[i].toString();
            
            }
            ans.add(s);
            return;
        }
        for(int j=0;j<n;j++){
            tmp[row].setCharAt(j,'Q');
            if(isvalid(tmp)){
                place(ans,tmp,n,row+1);
            }
            tmp[row].setCharAt(j,'.');
        }
    }
    public static boolean isvalid(StringBuilder[] tmp){
        for(int i=0;i<tmp.length;i++){
            for(int j=i+1;j<tmp.length;j++){
                int y1=tmp[i].indexOf("Q");
                int y2 = tmp[j].indexOf("Q");
                if(y1==-1||y2==-1) continue;
                if(y1==y2||Math.abs(y1-y2)==Math.abs(i-j))
                return false;
            }
        }
        return true;
    }
}
