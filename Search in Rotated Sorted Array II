Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Write a function to determine if a given target is in the array.

C++:
class Solution {
public:
    bool search(int A[], int n, int target) {
        int l =0;
        int r = n-1;
        while(l<=r){
            int m = l+(r-l)/2;
            if(A[m]==target) return true;
            if(A[m]<A[l]){
                if(target>A[m]&&target<=A[r]) l = m+1;
                else r = m-1;
            }
            else if(A[m]>A[l]){
                if(target>=A[l]&&target<A[m]) r = m-1;
                else l=m+1;
            }
            else l++;
        }
        return false;
    }
};

Java:
public class Solution {
    public boolean search(int[] A, int target) {
        int l = A.length;
        int left = 0;
        int right = l-1;
        while(left<=right){
            int mid = (left+right)>>1;
            if(target==A[mid]) return true;
            if(A[mid]<A[left]){
                if(target>A[mid]&&target<=A[right]){
                    left = mid+1;
                }
                else right = mid-1;
            }
            else if(A[mid]>A[left]){
                if(target<A[mid]&&target>=A[left]){
                    right = mid-1;
                }
                else left = mid+1;
            }
            else left++;
        }
        return false;
    }
}
