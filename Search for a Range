Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

public class Solution {
    public int[] searchRange(int[] A, int target) {
        int l =A.length;
        int[] ans = new int[2];
        ans[0] = -1;
        ans[1] = -1;
        if(l==0) return ans;
        int left = 0;
        int right = l-1;
        while(left<=right){
              int mid = left+(right-left)/2;
            if(A[mid]==target){
                ans[0] = mid;
                right = mid-1;
            }
            else if(A[mid]>target) right = mid-1;
            else left = mid+1;
        }
         left = 0;
         right = l-1;
        while(left<=right){
              int mid = left+(right-left)/2;
            if(A[mid]==target){
                ans[1] = mid;
                left = mid+1;
            }
            else if(A[mid]>target) right = mid-1;
            else left = mid+1;
        }
        return ans;
    }
}
