Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

C++:
class Solution {
public:
    bool isScramble(string s1, string s2) {
        int l1 = s1.size();
        int l2 = s2.size();
        if(l1!=l2) return false;
        if(l1==0||(s1.compare(s2)==0)) return true;
        string ss1 = s1;
        string ss2 = s2;
        sort(ss1.begin(),ss1.end());
        sort(ss2.begin(),ss2.end());
        if(ss1.compare(ss2)!=0) return false;
        for(int i=1;i<l1;i++){
            string s11 = s1.substr(0,i);
            string s12 = s1.substr(i);
            string s21 = s2.substr(0,i);
            string s22 = s2.substr(i);
            string s31 = s2.substr(0,l2-i);
            string s32 = s2.substr(l2-i);
            if((isScramble(s11,s21)&&isScramble(s12,s22))||(isScramble(s11,s32)&&isScramble(s12,s31)))
            return true;
        }
        return false;
    }
};

JAVAï¼š
public class Solution {
    public boolean isScramble(String s1, String s2) {
        if(s1.length()!=s2.length()) return false;
        if(s1.length()==0||s1.equals(s2)) return true;
        if(!sort(s1).equals(sort(s2))) return false;
        for(int i=1;i<s1.length();i++){
            String s11 = s1.substring(0,i);
            String s12 = s1.substring(i);
            String s21 = s2.substring(0,i);
            String s22 = s2.substring(i);
            String s31 = s2.substring(0,s2.length()-i);
            String s32 = s2.substring(s2.length()-i);
            if(isScramble(s11,s21)&&isScramble(s12,s22)||isScramble(s11,s32)&&isScramble(s12,s31))
            return true;
        }
        return false;
    }
    private String sort(String s){
       char[] arr = s.toCharArray();
       Arrays.sort(arr);
       return new String(arr);
   }
}
