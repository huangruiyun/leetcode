Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example,
Given the following matrix:

[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].

public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
       List<Integer> ret = new ArrayList<Integer>();  
       
       if(matrix.length == 0){  
            return ret;  
        }  
        int m = matrix.length;  
        int n = matrix[0].length; 
        add1(matrix, m, n, 0, ret);  
        return ret;  
    }
    public void add1(int[][] mt, int m, int n, int k, List<Integer> ret){
        if(m<=0||n<=0) return;
        if(m==1){
            for(int i=0;i<n;i++){
                ret.add(mt[k][k+i]);
            }
            return;
        }
        if(n==1){
            for(int j=0;j<m;j++){
                ret.add(mt[k+j][k]);
            }
            return;
        }
        for(int i=0;i<n-1;i++){
            ret.add(mt[k][k+i]);
        }
        for(int j=0;j<m-1;j++){
            ret.add(mt[k+j][k+n-1]);
        }
        for(int i=0;i<n-1;i++){
            ret.add(mt[k+m-1][k+n-1-i]);
        }
        for(int j=0;j<m-1;j++){
            ret.add(mt[k+m-1-j][k]);
        }
        add1(mt, m-2, n-2, k+1, ret);
    }
   
}
