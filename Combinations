Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

For example,
If n = 4 and k = 2, a solution is:

[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

C++:
class Solution {
public:
    vector<vector<int> > combine(int n, int k) {
        vector<vector<int> > res;
        vector<int> tmp;
        if(k==0||k>n) return res;
        com(res,tmp,k,1,n);
        return res;
    }
    void com(vector<vector<int> > &res,vector<int> &tmp,int k,int s,int n){
        if(k==0){
           // vector<int> t1 = tmp;
            res.push_back(tmp);
            return;
        }
        for(int i=s;i<=n;i++){
            vector<int> t2 = tmp;
            t2.push_back(i);
            com(res,t2,k-1,i+1,n);
        }
    }
};

Java:
public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        List<Integer> temp = new ArrayList<Integer>();
        if(n<=0||k<=0||k>n) return ans;
        com(ans,temp,k,1,n);
        return ans;
    }
    public static void com(List<List<Integer>> ans, List<Integer> temp,int k, int s, int n){
        if(k==0){
            ans.add(new ArrayList<Integer>(temp));
            return;
        } 
        for(int i=s;i<=n;i++){
            List<Integer> temp2 = new ArrayList<Integer>(temp);
            temp2.add(i);
            com(ans,temp2,k-1,i+1,n);
        }
    }
}
