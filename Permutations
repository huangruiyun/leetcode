Given a collection of numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].

public class Solution {
    public List<List<Integer>> permute(int[] num) {
        List<List<Integer>> ans =new ArrayList<List<Integer>>();
        if(num.length==0) return ans;
        List<Integer> done = new ArrayList<Integer>();
        List<Integer> former = new ArrayList<Integer>();
        for(int i =0;i<num.length;i++){
            former.add(num[i]);
        }
        per(ans,done,former);
        return ans;
    }
    public void per(List<List<Integer>> ans,List<Integer> done,List<Integer>former){
        if(former.size()==0){
            ans.add(new ArrayList<Integer>(done));
            return;
        }
        for(int i=0;i<former.size();i++){
            int tmp = former.remove(i);
            done.add(tmp);
            per(ans,done,former);
            done.remove(done.size()-1);
            former.add(i,tmp);
        }
    }
}
