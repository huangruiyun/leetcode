Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head==null||head.next==null) return head;
        ListNode d = new ListNode(0);
        d.next = head;
        ListNode p = head;
        ListNode c = head.next;
        ListNode h =d;
        while(p!=null&&p.next!=null){
            h.next = c;
            p.next=c.next;
            c.next=p;
            h = p;
            p = p.next;
            if(p!=null) c = p.next;
        }
        return d.next;
    }
}
