Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.

C++:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *deleteDuplicates(ListNode *head) {
      //  if(head==NULL||head->next==NULL) return head;
        ListNode *d = new ListNode(0);
        d->next = head;
        ListNode *pre =d;
        ListNode *cur =head;
        while(cur!=NULL&&cur->next!=NULL){
            if(cur->val!=cur->next->val){
                cur = cur->next;
                pre = pre->next;
            }
            else{
                while(cur->next!=NULL&&(cur->val==cur->next->val)){
                    cur = cur->next;
                }
                
                cur = cur->next;
                 pre->next = cur;
            }
        }
      
        return d->next;
    }
};

Java:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode d = new ListNode(0);
        d.next = head;
        ListNode pre = d;
        ListNode cur = head;
        while(cur!=null&&cur.next!=null){
            if(cur.next.val!=cur.val){
                cur = cur.next;
                pre = pre.next;
            }
            else{
                while(cur.next!=null&&cur.next.val==cur.val){
                    cur = cur.next;
                } 
                cur = cur.next;
                pre.next = cur;
            }
        }
        return d.next;
    }
}
