Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

C++:
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrderBottom(TreeNode *root) {
        vector<vector<int> > res;
        vector<int> tmp;
        if(root==NULL) return res;
        queue<TreeNode *> q;
        q.push(root);
        int cur = 1;
        int next = 0;
        stack<vector<int>> s;
        while(!q.empty()){
            TreeNode *r = q.front();
            tmp.push_back(r->val);
            q.pop();
            cur--;
            if(r->left!=NULL){
                q.push(r->left);
                next++;
            }
            if(r->right!=NULL){
                q.push(r->right);
                next++;
            }
            if(cur==0){
                s.push(tmp);
                cur = next;
                next=0;
                vector<int> tmp2;
                tmp = tmp2;
            }
        }
        while(!s.empty()){
            res.push_back(s.top());
            s.pop();
        }
        return res;
    }
};

Java:
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        if(root==null) return ans;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.add(root);
        List<Integer> temp = new ArrayList<Integer>();
        int cur = 1;
        int next = 0;
        while(!queue.isEmpty()){
            TreeNode node = queue.remove();
            temp.add(node.val);
            cur--;
            if(node.left!=null){
                queue.add(node.left);
                //temp.add(node.left.val);
                next++;
            }
            if(node.right!=null){
                queue.add(node.right);
               // temp.add(node.right.val);
                next++;
            }
            if(cur==0){
                ans.add(temp);
                temp = new ArrayList<Integer>();
                cur = next;
                next = 0;
            }
        }
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        for(int i=ans.size()-1;i>=0;i--){
            List<Integer> r = new ArrayList<Integer>();
            r = ans.get(i);
            res.add(r);
        }
        
        return res;
    }
}
