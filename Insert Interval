Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        if(intervals==null||newInterval==null) return intervals;
        List<Interval> ans= new ArrayList<Interval>();
        int pos =0;
        //Interval pre = intervals.get(0);
        for(int i=0;i<intervals.size();i++){
            Interval pre = intervals.get(i);
            if(newInterval.start>pre.end){
                ans.add(pre);
                pos++;
            }
            else if(newInterval.end<pre.start){
                ans.add(pre);
            }
            else{
                newInterval.start = Math.min(pre.start,newInterval.start);
                newInterval.end = Math.max(pre.end,newInterval.end);
            }
        }
        ans.add(pos,newInterval);
        return ans;
    }
}
