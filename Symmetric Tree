Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.

C++:
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode *root) {
        if(root==NULL) return true;
        return check(root->left,root->right);
    }
    bool check(TreeNode *left,TreeNode *right){
        if((left!=NULL&&right==NULL)||(left==NULL&&right!=NULL)) return false;
        if(left==NULL&&right==NULL) return true;
        if(left->val!=right->val) return false;
        return check(left->left,right->right)&&check(left->right,right->left);
    }
};

Java:
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root==null) return true;
       // if(root.left.val!=root.right.val) return false;
        return check(root.left,root.right);
    }
    public static boolean check(TreeNode left,TreeNode right){
        if(left==null&&right==null) return true;
        if(left==null||right==null) return false;
        if(left.val!=right.val) return false;
        return check(left.left,right.right)&&check(left.right,right.left);
    }
}
